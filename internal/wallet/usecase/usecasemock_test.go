// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	time "github.com/sataapon/btc/internal/time"
	entity "github.com/sataapon/btc/internal/wallet/entity"
)

// MockwalletRepository is a mock of walletRepository interface.
type MockwalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockwalletRepositoryMockRecorder
}

// MockwalletRepositoryMockRecorder is the mock recorder for MockwalletRepository.
type MockwalletRepositoryMockRecorder struct {
	mock *MockwalletRepository
}

// NewMockwalletRepository creates a new mock instance.
func NewMockwalletRepository(ctrl *gomock.Controller) *MockwalletRepository {
	mock := &MockwalletRepository{ctrl: ctrl}
	mock.recorder = &MockwalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwalletRepository) EXPECT() *MockwalletRepositoryMockRecorder {
	return m.recorder
}

// GetLastRecord mocks base method.
func (m *MockwalletRepository) GetLastRecord() (*entity.Record, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastRecord")
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLastRecord indicates an expected call of GetLastRecord.
func (mr *MockwalletRepositoryMockRecorder) GetLastRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRecord", reflect.TypeOf((*MockwalletRepository)(nil).GetLastRecord))
}

// GetRecordsEveryHour mocks base method.
func (m *MockwalletRepository) GetRecordsEveryHour(startDatetime, endDatetime time.Time) ([]*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsEveryHour", startDatetime, endDatetime)
	ret0, _ := ret[0].([]*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsEveryHour indicates an expected call of GetRecordsEveryHour.
func (mr *MockwalletRepositoryMockRecorder) GetRecordsEveryHour(startDatetime, endDatetime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsEveryHour", reflect.TypeOf((*MockwalletRepository)(nil).GetRecordsEveryHour), startDatetime, endDatetime)
}

// Insert mocks base method.
func (m *MockwalletRepository) Insert(record *entity.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockwalletRepositoryMockRecorder) Insert(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockwalletRepository)(nil).Insert), record)
}
